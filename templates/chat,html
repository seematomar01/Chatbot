<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>GROQ Multimodal Chatbot</title>
    <link rel="stylesheet" href="/static/style.css">
    <style>
        body {
            font-family: 'Segoe UI', sans-serif;
            background: #f5f5f5;
            margin: 0;
            padding: 0;
        }

        .chat-container {
            max-width: 800px;
            margin: 2rem auto;
            background: #ffffff;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
            padding: 1rem;
            display: flex;
            flex-direction: column;
            height: 90vh;
        }

        #chat-box {
            flex-grow: 1;
            overflow-y: auto;
            padding: 1rem;
            border-bottom: 1px solid #ccc;
        }

        .message {
            margin: 1rem 0;
            padding: 0.75rem;
            border-radius: 12px;
            max-width: 80%;
            line-height: 1.5;
        }

        .user {
            background: #e0f7fa;
            align-self: flex-end;
            text-align: right;
            margin-left: auto;
        }

        .assistant {
            background: #eeeeee;
            align-self: flex-start;
        }

        .message-image {
            max-width: 200px;
            margin: 0.5rem 0;
            border-radius: 8px;
            border: 1px solid #ddd;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .message-content {
            margin-top: 0.5rem;
        }

        #chat-form {
            display: flex;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        #message {
            flex-grow: 1;
            padding: 0.75rem;
            font-size: 1rem;
            border: 1px solid #ddd;
            border-radius: 8px;
        }

        #image {
            padding: 0.5rem;
        }

        button {
            padding: 0.75rem 1rem;
            font-size: 1rem;
            background: #1976d2;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
        }

        button:hover {
            background: #1565c0;
        }

        .reset-btn {
            background: #f44336 !important;
        }

        .reset-btn:hover {
            background: #d32f2f !important;
        }

        img.preview {
            max-width: 150px;
            margin-top: 5px;
            border-radius: 8px;
        }

        .input-wrapper {
            display: flex;
            flex-direction: column;
            flex-grow: 1;
        }

        .file-input-wrapper {
            display: flex;
            align-items: center;
            gap: 0.5rem;
            margin-top: 0.5rem;
        }

        .loading {
            opacity: 0.7;
            pointer-events: none;
        }
    </style>
</head>
<body>
<div class="chat-container">
    <div id="chat-box">
        {% for msg in history %}
            <div class="message {{ msg.role }}">
                <strong>{{ msg.role.capitalize() }}:</strong>
                {% if msg.role == 'user' and msg.get('image') %}
                <br><img src="/uploads/{{ msg.image }}" class="message-image" alt="Uploaded image">
                {% endif %}
                <div class="message-content">{{ msg.content }}</div>
            </div>
        {% endfor %}
    </div>

    <form id="chat-form" enctype="multipart/form-data">
        <div class="input-wrapper">
            <input type="text" name="message" id="message" placeholder="Type your message" required>
            <div class="file-input-wrapper">
                <input type="file" name="image" id="image" accept="image/*">
                <img id="preview" class="preview" style="display:none;">
            </div>
        </div>
        <button type="submit" id="send-btn">Send</button>
        <button type="button" onclick="resetChat()" class="reset-btn">Reset</button>
    </form>
</div>

<script>
    const chatBox = document.getElementById("chat-box");
    const preview = document.getElementById("preview");
    const imageInput = document.getElementById("image");
    const sendBtn = document.getElementById("send-btn");

    function scrollToBottom() {
        chatBox.scrollTop = chatBox.scrollHeight;
    }

    imageInput.addEventListener("change", () => {
        const file = imageInput.files[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = e => {
                preview.src = e.target.result;
                preview.style.display = "block";
            };
            reader.readAsDataURL(file);
        } else {
            preview.style.display = "none";
        }
    });

    document.getElementById("chat-form").addEventListener("submit", async (e) => {
        e.preventDefault();
        const form = e.target;
        const formData = new FormData(form);
        const message = formData.get("message");
        const imageFile = formData.get("image");

        // Show loading state
        sendBtn.textContent = "Sending...";
        sendBtn.classList.add("loading");

        // Create user message HTML
        let userMessageHTML = `<div class="message user"><strong>User:</strong>`;
        
        // If there's an image, show it in the message
        if (imageFile && imageFile.size > 0) {
            const imageURL = URL.createObjectURL(imageFile);
            userMessageHTML += `<br><img src="${imageURL}" class="message-image" alt="Uploaded image">`;
        }
        
        userMessageHTML += `<div class="message-content">${message}</div></div>`;
        
        // Add user message to UI
        chatBox.innerHTML += userMessageHTML;
        scrollToBottom();

        try {
            // Send to server
            const response = await fetch("/chat", {
                method: "POST",
                body: formData
            });

            const data = await response.json();
            
            // Add assistant response to UI
            chatBox.innerHTML += `<div class="message assistant"><strong>Assistant:</strong><div class="message-content">${data.response}</div></div>`;
            
            // Reset form
            form.reset();
            preview.style.display = "none";
            scrollToBottom();
        } catch (error) {
            console.error("Error sending message:", error);
            chatBox.innerHTML += `<div class="message assistant"><strong>Error:</strong><div class="message-content">Failed to send message. Please try again.</div></div>`;
        } finally {
            // Reset button state
            sendBtn.textContent = "Send";
            sendBtn.classList.remove("loading");
        }
    });

    async function resetChat() {
        if (confirm("Are you sure you want to reset the chat? This will clear all messages and uploaded images.")) {
            try {
                await fetch("/reset", { method: "POST" });
                location.reload();
            } catch (error) {
                console.error("Error resetting chat:", error);
                alert("Failed to reset chat. Please try again.");
            }
        }
    }

    // Initial scroll to bottom
    scrollToBottom();
</script>
</body>
</html>
